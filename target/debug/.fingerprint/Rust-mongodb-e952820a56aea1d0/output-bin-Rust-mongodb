{"$message_type":"diagnostic","message":"file not found for module `error`","code":{"code":"E0583","explanation":"A file wasn't found for an out-of-line module.\n\nErroneous code example:\n\n```compile_fail,E0583\nmod file_that_doesnt_exist; // error: file not found for module\n\nfn main() {}\n```\n\nPlease be sure that a file corresponding to the module exists. If you\nwant to use a module named `file_that_doesnt_exist`, you need to have a file\nnamed `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\nsame directory.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":254,"byte_end":264,"line_start":11,"line_end":11,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"mod error;","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to create the module `error`, create file \"src/error.rs\" or \"src/error/mod.rs\"","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if there is a `mod error` elsewhere in the crate already, import it with `use crate::...` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0583]\u001b[0m\u001b[0m\u001b[1m: file not found for module `error`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod error;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to create the module `error`, create file \"src/error.rs\" or \"src/error/mod.rs\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if there is a `mod error` elsewhere in the crate already, import it with `use crate::...` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `crate::error::Error`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":19,"byte_end":24,"line_start":1,"line_end":1,"column_start":20,"column_end":25,"is_primary":true,"text":[{"text":"use crate::{error::Error::*, handler::BookRequest, Book, Result};","highlight_start":20,"highlight_end":25}],"label":"could not find `Error` in `error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `crate::error::Error`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:1:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{error::Error::*, handler::BookRequest, Book, Result};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `Error` in `error`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"missing generics for struct `mongodb::Collection`","code":{"code":"E0107","explanation":"An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":2718,"byte_end":2728,"line_start":95,"line_end":95,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"    fn get_collection(&self) -> Collection {","highlight_start":33,"highlight_end":43}],"label":"expected 1 generic argument","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"struct defined here, with 1 generic parameter: `T`","code":null,"level":"note","spans":[{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mongodb-3.1.0/src/coll.rs","byte_start":2738,"byte_end":2739,"line_start":74,"line_end":74,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"pub struct Collection<T>","highlight_start":23,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mongodb-3.1.0/src/coll.rs","byte_start":2727,"byte_end":2737,"line_start":74,"line_end":74,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct Collection<T>","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"add missing generic argument","code":null,"level":"help","spans":[{"file_name":"src/db.rs","byte_start":2728,"byte_end":2728,"line_start":95,"line_end":95,"column_start":43,"column_end":43,"is_primary":true,"text":[{"text":"    fn get_collection(&self) -> Collection {","highlight_start":43,"highlight_end":43}],"label":null,"suggested_replacement":"<T>","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0107]\u001b[0m\u001b[0m\u001b[1m: missing generics for struct `mongodb::Collection`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:95:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_collection(&self) -> Collection {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 1 generic argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: struct defined here, with 1 generic parameter: `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/mongodb-3.1.0/src/coll.rs:74:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Collection<T>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add missing generic argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn get_collection(&self) -> Collection\u001b[0m\u001b[0m\u001b[38;5;10m<T>\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bson: From<chrono::DateTime<chrono::Utc>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":6331,"byte_end":6332,"line_start":184,"line_end":184,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        <_ as ::std::convert::Into<$crate::Bson>>::into($other)","highlight_start":10,"highlight_end":11}],"label":"the trait `From<chrono::DateTime<chrono::Utc>>` is not implemented for `Bson`, which is required by `chrono::DateTime<chrono::Utc>: Into<Bson>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3863,"byte_end":3884,"line_start":111,"line_end":111,"column_start":51,"column_end":72,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":51,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/db.rs","byte_start":1337,"byte_end":1552,"line_start":47,"line_end":53,"column_start":19,"column_end":10,"is_primary":false,"text":[{"text":"        let doc = doc! {","highlight_start":19,"highlight_end":25},{"text":"            NAME: entry.name.clone(),","highlight_start":1,"highlight_end":38},{"text":"            AUTHOR: entry.author.clone(),","highlight_start":1,"highlight_end":42},{"text":"            NUM_PAGES: entry.num_pages as i32,","highlight_start":1,"highlight_end":47},{"text":"            ADDED_AT: Utc::now(),","highlight_start":1,"highlight_end":34},{"text":"            TAGS: entry.tags.clone(),","highlight_start":1,"highlight_end":38},{"text":"        };","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"doc!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Bson` implements `From<&T>`\n  `Bson` implements `From<&[T]>`\n  `Bson` implements `From<&mut T>`\n  `Bson` implements `From<&str>`\n  `Bson` implements `From<Regex>`\n  `Bson` implements `From<Vec<T>>`\n  `Bson` implements `From<[u8; 12]>`\n  `Bson` implements `From<bool>`\nand 17 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `chrono::DateTime<chrono::Utc>` to implement `Into<Bson>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bson: From<chrono::DateTime<chrono::Utc>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:47:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let doc = doc! {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m___________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            NAME: entry.name.clone(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            AUTHOR: entry.author.clone(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            NUM_PAGES: entry.num_pages as i32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ADDED_AT: Utc::now(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            TAGS: entry.tags.clone(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<chrono::DateTime<chrono::Utc>>` is not implemented for `Bson`, which is required by `chrono::DateTime<chrono::Utc>: Into<Bson>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `Bson` implements `From<&T>`\u001b[0m\n\u001b[0m             `Bson` implements `From<&[T]>`\u001b[0m\n\u001b[0m             `Bson` implements `From<&mut T>`\u001b[0m\n\u001b[0m             `Bson` implements `From<&str>`\u001b[0m\n\u001b[0m             `Bson` implements `From<Regex>`\u001b[0m\n\u001b[0m             `Bson` implements `From<Vec<T>>`\u001b[0m\n\u001b[0m             `Bson` implements `From<[u8; 12]>`\u001b[0m\n\u001b[0m             `Bson` implements `From<bool>`\u001b[0m\n\u001b[0m           and 17 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `chrono::DateTime<chrono::Utc>` to implement `Into<Bson>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `with_string` found for struct `mongodb::bson::oid::ObjectId` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":1810,"byte_end":1821,"line_start":63,"line_end":63,"column_start":29,"column_end":40,"is_primary":true,"text":[{"text":"        let oid = ObjectId::with_string(id).map_err(|_| InvalidIDError(id.to_owned()))?;","highlight_start":29,"highlight_end":40}],"label":"function or associated item not found in `ObjectId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `mongodb::bson::oid::ObjectId` consider using one of the following associated functions:\nmongodb::bson::oid::ObjectId::new\nmongodb::bson::oid::ObjectId::from_bytes\nmongodb::bson::oid::ObjectId::from_parts\nmongodb::bson::oid::ObjectId::parse_str","code":null,"level":"note","spans":[{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":5383,"byte_end":5403,"line_start":169,"line_end":169,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":5690,"byte_end":5742,"line_start":178,"line_end":178,"column_start":5,"column_end":57,"is_primary":true,"text":[{"text":"    pub const fn from_bytes(bytes: [u8; 12]) -> ObjectId {","highlight_start":5,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":5945,"byte_end":6035,"line_start":185,"line_end":185,"column_start":5,"column_end":95,"is_primary":true,"text":[{"text":"    pub fn from_parts(seconds_since_epoch: u32, process_id: [u8; 5], counter: [u8; 3]) -> Self {","highlight_start":5,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":6537,"byte_end":6593,"line_start":198,"line_end":198,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    pub fn parse_str(s: impl AsRef<str>) -> Result<ObjectId> {","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"there is a method `to_string` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/user/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/string.rs","byte_start":82317,"byte_end":82347,"line_start":2544,"line_end":2544,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    fn to_string(&self) -> String;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `with_string` found for struct `mongodb::bson::oid::ObjectId` in the current scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:63:29\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let oid = ObjectId::with_string(id).map_err(|_| InvalidIDError(id.to_owned()))?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `ObjectId`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `mongodb::bson::oid::ObjectId` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::new\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::from_bytes\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::from_parts\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::parse_str\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs:169:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub const fn from_bytes(bytes: [u8; 12]) -> ObjectId {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_parts(seconds_since_epoch: u32, process_id: [u8; 5], counter: [u8; 3]) -> Self {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn parse_str(s: impl AsRef<str>) -> Result<ObjectId> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `to_string` with a similar name, but with different arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/string.rs:2544:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_string(&self) -> String;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bson: From<chrono::DateTime<chrono::Utc>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":6331,"byte_end":6332,"line_start":184,"line_end":184,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        <_ as ::std::convert::Into<$crate::Bson>>::into($other)","highlight_start":10,"highlight_end":11}],"label":"the trait `From<chrono::DateTime<chrono::Utc>>` is not implemented for `Bson`, which is required by `chrono::DateTime<chrono::Utc>: Into<Bson>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3863,"byte_end":3884,"line_start":111,"line_end":111,"column_start":51,"column_end":72,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":51,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/db.rs","byte_start":1951,"byte_end":2166,"line_start":67,"line_end":73,"column_start":19,"column_end":10,"is_primary":false,"text":[{"text":"        let doc = doc! {","highlight_start":19,"highlight_end":25},{"text":"            NAME: entry.name.clone(),","highlight_start":1,"highlight_end":38},{"text":"            AUTHOR: entry.author.clone(),","highlight_start":1,"highlight_end":42},{"text":"            NUM_PAGES: entry.num_pages as i32,","highlight_start":1,"highlight_end":47},{"text":"            ADDED_AT: Utc::now(),","highlight_start":1,"highlight_end":34},{"text":"            TAGS: entry.tags.clone(),","highlight_start":1,"highlight_end":38},{"text":"        };","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"doc!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Bson` implements `From<&T>`\n  `Bson` implements `From<&[T]>`\n  `Bson` implements `From<&mut T>`\n  `Bson` implements `From<&str>`\n  `Bson` implements `From<Regex>`\n  `Bson` implements `From<Vec<T>>`\n  `Bson` implements `From<[u8; 12]>`\n  `Bson` implements `From<bool>`\nand 17 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `chrono::DateTime<chrono::Utc>` to implement `Into<Bson>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Bson: From<chrono::DateTime<chrono::Utc>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:67:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let doc = doc! {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m___________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            NAME: entry.name.clone(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            AUTHOR: entry.author.clone(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            NUM_PAGES: entry.num_pages as i32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ADDED_AT: Utc::now(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            TAGS: entry.tags.clone(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<chrono::DateTime<chrono::Utc>>` is not implemented for `Bson`, which is required by `chrono::DateTime<chrono::Utc>: Into<Bson>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `Bson` implements `From<&T>`\u001b[0m\n\u001b[0m             `Bson` implements `From<&[T]>`\u001b[0m\n\u001b[0m             `Bson` implements `From<&mut T>`\u001b[0m\n\u001b[0m             `Bson` implements `From<&str>`\u001b[0m\n\u001b[0m             `Bson` implements `From<Regex>`\u001b[0m\n\u001b[0m             `Bson` implements `From<Vec<T>>`\u001b[0m\n\u001b[0m             `Bson` implements `From<[u8; 12]>`\u001b[0m\n\u001b[0m             `Bson` implements `From<bool>`\u001b[0m\n\u001b[0m           and 17 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `chrono::DateTime<chrono::Utc>` to implement `Into<Bson>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::bson` which comes from the expansion of the macro `doc` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no function or associated item named `with_string` found for struct `mongodb::bson::oid::ObjectId` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":2412,"byte_end":2423,"line_start":83,"line_end":83,"column_start":29,"column_end":40,"is_primary":true,"text":[{"text":"        let oid = ObjectId::with_string(id).map_err(|_| InvalidIDError(id.to_owned()))?;","highlight_start":29,"highlight_end":40}],"label":"function or associated item not found in `ObjectId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you're trying to build a new `mongodb::bson::oid::ObjectId` consider using one of the following associated functions:\nmongodb::bson::oid::ObjectId::new\nmongodb::bson::oid::ObjectId::from_bytes\nmongodb::bson::oid::ObjectId::from_parts\nmongodb::bson::oid::ObjectId::parse_str","code":null,"level":"note","spans":[{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":5383,"byte_end":5403,"line_start":169,"line_end":169,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":5690,"byte_end":5742,"line_start":178,"line_end":178,"column_start":5,"column_end":57,"is_primary":true,"text":[{"text":"    pub const fn from_bytes(bytes: [u8; 12]) -> ObjectId {","highlight_start":5,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":5945,"byte_end":6035,"line_start":185,"line_end":185,"column_start":5,"column_end":95,"is_primary":true,"text":[{"text":"    pub fn from_parts(seconds_since_epoch: u32, process_id: [u8; 5], counter: [u8; 3]) -> Self {","highlight_start":5,"highlight_end":95}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs","byte_start":6537,"byte_end":6593,"line_start":198,"line_end":198,"column_start":5,"column_end":61,"is_primary":true,"text":[{"text":"    pub fn parse_str(s: impl AsRef<str>) -> Result<ObjectId> {","highlight_start":5,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"there is a method `to_string` with a similar name, but with different arguments","code":null,"level":"help","spans":[{"file_name":"/Users/user/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/string.rs","byte_start":82317,"byte_end":82347,"line_start":2544,"line_end":2544,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    fn to_string(&self) -> String;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no function or associated item named `with_string` found for struct `mongodb::bson::oid::ObjectId` in the current scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:83:29\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let oid = ObjectId::with_string(id).map_err(|_| InvalidIDError(id.to_owned()))?;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfunction or associated item not found in `ObjectId`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: if you're trying to build a new `mongodb::bson::oid::ObjectId` consider using one of the following associated functions:\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::new\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::from_bytes\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::from_parts\u001b[0m\n\u001b[0m      mongodb::bson::oid::ObjectId::parse_str\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/oid.rs:169:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub const fn from_bytes(bytes: [u8; 12]) -> ObjectId {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_parts(seconds_since_epoch: u32, process_id: [u8; 5], counter: [u8; 3]) -> Self {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn parse_str(s: impl AsRef<str>) -> Result<ObjectId> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is a method `to_string` with a similar name, but with different arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/string.rs:2544:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_string(&self) -> String;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/db.rs","byte_start":3313,"byte_end":3322,"line_start":112,"line_end":112,"column_start":23,"column_end":32,"is_primary":true,"text":[{"text":"            added_at: *added_at,","highlight_start":23,"highlight_end":32}],"label":"expected `DateTime<Utc>`, found `DateTime`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`mongodb::bson::DateTime` and `chrono::DateTime<chrono::Utc>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`mongodb::bson::DateTime` is defined in crate `bson`","code":null,"level":"note","spans":[{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/datetime.rs","byte_start":6541,"byte_end":6560,"line_start":183,"line_end":183,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"pub struct DateTime(i64);","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`chrono::DateTime<chrono::Utc>` is defined in crate `chrono`","code":null,"level":"note","spans":[{"file_name":"/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.38/src/datetime/mod.rs","byte_start":1903,"byte_end":1936,"line_start":56,"line_end":56,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"pub struct DateTime<Tz: TimeZone> {","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:112:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            added_at: *added_at,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `DateTime<Utc>`, found `DateTime`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `mongodb::bson::DateTime` and `chrono::DateTime<chrono::Utc>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `mongodb::bson::DateTime` is defined in crate `bson`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bson-2.13.0/src/datetime.rs:183:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct DateTime(i64);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `chrono::DateTime<chrono::Utc>` is defined in crate `chrono`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.38/src/datetime/mod.rs:56:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct DateTime<Tz: TimeZone> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `futures::StreamExt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/db.rs","byte_start":94,"byte_end":112,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use futures::StreamExt;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `futures::StreamExt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/db.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse futures::StreamExt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 8 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 8 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0107, E0277, E0308, E0432, E0583, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0107, E0277, E0308, E0432, E0583, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0107`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0107`.\u001b[0m\n"}
